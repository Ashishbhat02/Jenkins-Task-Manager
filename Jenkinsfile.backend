// pipeline {
//     agent {
//         docker {
//             image 'mcr.microsoft.com/dotnet/sdk:5.0'
//             reuseNode true
//         }
//     }
    
//     environment {
//         PROJECT_NAME = 'TaskManagerAPI.csproj'
//         DOCKER_IMAGE = 'taskmanager-backend'
//     }
    
//     stages {
//         stage('Checkout Code') {
//             steps {
//                 checkout scm
//                 sh 'pwd'
//                 sh 'ls -la'
//             }
//         }
        
//         stage('Restore Dependencies') {
//             steps {
//                 sh "dotnet restore ${PROJECT_NAME}"
//             }
//         }
        
//         stage('Build Application') {
//             steps {
//                 sh "dotnet build ${PROJECT_NAME} -c Release --no-restore"
//             }
//         }
        
//         stage('Run Tests') {
//             steps {
//                 script {
//                     // Try to run tests, but continue if none exist
//                     try {
//                         sh "dotnet test ${PROJECT_NAME} --verbosity normal --logger trx"
//                     } catch (Exception e) {
//                         echo "No tests found or tests failed: ${e.message}"
//                         // Continue pipeline even if tests fail
//                     }
//                 }
//             }
//         }
        
//         stage('Publish Application') {
//             steps {
//                 sh "dotnet publish ${PROJECT_NAME} -c Release -o ./publish --no-restore"
//             }
//         }
        
//         stage('Build Docker Image') {
//             steps {
//                 script {
//                     // Build Docker image with build number tag
//                     docker.build("${DOCKER_IMAGE}:${env.BUILD_NUMBER}")
                    
//                     // Also tag as latest for production
//                     sh "docker tag ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ${DOCKER_IMAGE}:latest"
//                 }
//             }
//         }
//     }
    
//     post {
//         always {
//             // Archive build artifacts
//             archiveArtifacts artifacts: 'publish/**/*', fingerprint: true
            
//             // Clean up workspace
//             cleanWs()
//         }
//         success {
//             echo 'Backend build completed successfully! ✅'
//         }
//         failure {
//             echo 'Backend build failed! ❌'
//         }
//     }
// }


// UPDATE CODE 

pipeline {
    agent {
        docker {
            image 'mcr.microsoft.com/dotnet/sdk:5.0'
            reuseNode true
        }
    }
    
    environment {
        PROJECT_PATH = 'TaskManagerAPI/TaskManagerAPI.csproj'   // explicit path to csproj
        DOCKER_IMAGE = 'taskmanager-backend'
        DOTNET_CLI_HOME = "${env.WORKSPACE}/.dotnet"           // make dotnet write first-run files here
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
                sh 'pwd'
                sh 'ls -la'
            }
        }
        
        stage('Restore Dependencies') {
            steps {
                sh '''
                  set -e
                  echo "Using DOTNET_CLI_HOME=$DOTNET_CLI_HOME"
                  mkdir -p "$DOTNET_CLI_HOME"
                  # optional: try to make it writable for common container UIDs used by Jenkins
                  chown -R 111:113 "$DOTNET_CLI_HOME" || true
                  dotnet restore "${PROJECT_PATH}"
                '''
            }
        }
        
        stage('Build Application') {
            steps {
                sh "dotnet build \"${PROJECT_PATH}\" -c Release --no-restore"
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    try {
                        sh "dotnet test \"${PROJECT_PATH}\" --verbosity normal --logger trx"
                    } catch (Exception e) {
                        echo "No tests found or tests failed: ${e.message}"
                        // Continue pipeline even if tests fail
                    }
                }
            }
        }
        
        stage('Publish Application') {
            steps {
                sh "dotnet publish \"${PROJECT_PATH}\" -c Release -o ./publish --no-restore"
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${env.BUILD_NUMBER}")
                    sh "docker tag ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ${DOCKER_IMAGE}:latest"
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: 'publish/**/*', fingerprint: true
            cleanWs()
        }
        success {
            echo 'Backend build completed successfully! ✅'
        }
        failure {
            echo 'Backend build failed! ❌'
        }
    }
}
