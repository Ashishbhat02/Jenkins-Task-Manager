pipeline {
    agent any

    environment {
        NODE_IMAGE = 'node:18-alpine'
    }

    stages {

        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('taskmanager-frontend') {
                    // Create local npm cache and npmrc to avoid permission issues
                    sh '''
                        mkdir -p .npm-cache
                        touch .npmrc
                        export NPM_CONFIG_CACHE=$(pwd)/.npm-cache
                        export NPM_CONFIG_USERCONFIG=$(pwd)/.npmrc
                        npm install
                    '''
                }
            }
        }

        stage('Code Quality Check') {
            steps {
                dir('taskmanager-frontend') {
                    echo "Skipping lint for now in CI"
                    // Optional: uncomment if you fix lint later
                    // sh 'npm run lint || true'
                }
            }
        }

        stage('Build React App') {
            steps {
                dir('taskmanager-frontend') {
                    sh 'npm run build'
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('taskmanager-frontend') {
                    echo "Skipping tests for now in CI"
                    // Optional: uncomment if you fix Jest for ESM
                    // sh 'npm test -- --watchAll=false --coverage'
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                dir('taskmanager-frontend') {
                    archiveArtifacts artifacts: 'build/**', fingerprint: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Skipping Docker build: Docker not installed on this agent"
                // Optional: uncomment if Docker becomes available
                // dir('taskmanager-frontend') {
                //     script {
                //         docker.build("taskmanager-frontend:${env.BUILD_NUMBER}")
                //     }
                // }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "Frontend build succeeded ✅"
        }
        failure {
            echo "Frontend build failed ❌"
        }
    }
}
