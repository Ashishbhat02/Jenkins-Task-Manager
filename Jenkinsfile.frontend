pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'taskmanager-frontend'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('taskmanager-frontend') {
                    script {
                        // Build the Docker image
                        sh "docker build -t ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ."
                        sh "docker tag ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    // Stop and remove old container if it exists
                    sh 'docker stop taskmanager-frontend-prod || true'
                    sh 'docker rm taskmanager-frontend-prod || true'
                    
                    // Run new container with the correct API configuration
                    sh """
                    docker run -d \
                      -p 80:80 \
                      --name taskmanager-frontend-prod \
                      ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    // Wait a bit for container to start
                    sleep 10
                    
                    // Check if container is running
                    sh 'docker ps | grep taskmanager-frontend-prod'
                    
                    // Test if the frontend is accessible
                    sh 'curl -f http://localhost || echo "Frontend might still be starting..."'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "Frontend build and deployment succeeded ✅"
        }
        failure {
            echo "Frontend build failed ❌"
        }
    }
}
