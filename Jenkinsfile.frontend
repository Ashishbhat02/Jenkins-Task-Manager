pipeline {
    agent any

    environment {
        NODE_IMAGE = 'node:18-alpine'
        DOCKER_IMAGE = 'taskmanager-frontend'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('taskmanager-frontend') {
                    sh '''
                        mkdir -p .npm-cache
                        touch .npmrc
                        export NPM_CONFIG_CACHE=$(pwd)/.npm-cache
                        export NPM_CONFIG_USERCONFIG=$(pwd)/.npmrc
                        npm install
                    '''
                }
            }
        }

        stage('Code Quality Check') {
            steps {
                dir('taskmanager-frontend') {
                    echo "Skipping lint for now in CI"
                }
            }
        }

        stage('Build React App') {
            steps {
                dir('taskmanager-frontend') {
                    // Set the correct API URL during build
                    sh 'export REACT_APP_API_URL=http://43.205.124.152:5000 && npm run build'
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('taskmanager-frontend') {
                    echo "Skipping tests for now in CI"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('taskmanager-frontend') {
                    script {
                        sh "docker build -t ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ."
                        sh "docker tag ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    // Stop and remove old container
                    sh 'docker stop taskmanager-frontend-prod || true'
                    sh 'docker rm taskmanager-frontend-prod || true'
                    
                    // Run new container
                    sh "docker run -d -p 80:80 --name taskmanager-frontend-prod ${DOCKER_IMAGE}:latest"
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                dir('taskmanager-frontend') {
                    archiveArtifacts artifacts: 'build/**', fingerprint: true
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "Frontend build and deployment succeeded ✅"
        }
        failure {
            echo "Frontend build failed ❌"
        }
    }
}
