pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'taskmanager-frontend'
    }

    stages {
        // Unconditional checkout so changeset has data to evaluate
        stage('Prepare') {
            steps {
                // Checkout the repo (so changeset works later)
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CleanBeforeCheckout']],
                    submoduleCfg: [],
                    // update with your repo URL if different
                    userRemoteConfigs: [[url: 'https://github.com/Ashishbhat02/Jenkins-Task-Manager']]
                ])
                sh 'pwd'
                sh 'ls -la'
            }
        }

        // Actual pipeline only runs if frontend files changed
        stage('Run Frontend Pipeline') {
            when {
                changeset '**/taskmanager-frontend/**'
            }
            stages {
                stage('Install Dependencies') {
                    steps {
                        dir('taskmanager-frontend') {
                            sh '''
                                mkdir -p .npm-cache
                                touch .npmrc
                                export NPM_CONFIG_CACHE=$(pwd)/.npm-cache
                                export NPM_CONFIG_USERCONFIG=$(pwd)/.npmrc
                                npm install
                            '''
                        }
                    }
                }

                stage('Build React App') {
                    steps {
                        dir('taskmanager-frontend') {
                            // replace API URL as needed or inject via env/parameters
                            sh 'export REACT_APP_API_URL=http://13.200.76.198:5000 && npm run build'
                        }
                    }
                }

                stage('Build Docker Image') {
                    steps {
                        dir('taskmanager-frontend') {
                            script {
                                sh "docker build -t ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ."
                                sh "docker tag ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ${DOCKER_IMAGE}:latest"
                            }
                        }
                    }
                }

                stage('Deploy to Production') {
                    steps {
                        script {
                            sh 'docker stop taskmanager-frontend-prod || true'
                            sh 'docker rm taskmanager-frontend-prod || true'
                            sh "docker run -d -p 80:80 --name taskmanager-frontend-prod ${DOCKER_IMAGE}:latest"
                        }
                    }
                }

                stage('Verify Deployment') {
                    steps {
                        script {
                            sleep 5
                            sh 'docker ps | grep taskmanager-frontend-prod || echo \"Container not found\"'
                            sh 'curl -f http://localhost/ || echo \"Frontend might be starting...\"'
                        }
                    }
                }

                stage('Archive Artifacts') {
                    steps {
                        dir('taskmanager-frontend') {
                            script {
                                if (fileExists('build')) {
                                    archiveArtifacts artifacts: 'build/**', fingerprint: true
                                } else {
                                    echo 'No build folder to archive.'
                                }
                            }
                        }
                    }
                }
            } // end nested stages
        } // end Run Frontend Pipeline
    } // end stages

    post {
        success {
            echo "Frontend build and deployment succeeded ✅"
        }
        failure {
            echo "Frontend build failed ❌"
        }
        always {
            cleanWs()
        }
    }
}
